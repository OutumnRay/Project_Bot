from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, ApplicationBuilder, CallbackContext, MessageHandler, filters, CallbackQueryHandler
from dotenv import load_dotenv
import pandas as pd
import os
import sys
from thefuzz import process


def get_root_path(file_name):
    try:
        project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        path_to_file = os.path.join(project_root, file_name)
        return str(path_to_file)
    except (TypeError, FileNotFoundError) as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


load_dotenv(dotenv_path=get_root_path('data.env'))
token = os.getenv('Token')
EXCEL_FILE = get_root_path('books.xlsx')
df = pd.read_excel(EXCEL_FILE)


async def start(update: Update, context: CallbackContext) -> None:
    # –°–æ–∑–¥–∞—ë–º –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = [
        ["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–†–∞–∑–¥–µ–ª—ã", "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –≤—Å–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞"],  # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ '
                                    '–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /info –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.',
                                    reply_markup=reply_markup)


async def info(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text('–≠—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞:'
                                    '\n/search [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞]')


def fuzzy_search(query, threshold=70):
    # –ü–æ–∏—Å–∫ –ø–æ —Å—Ç–æ–ª–±—Ü—É Title (–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏)
    title_choices = df["Title"].dropna().unique()
    best_title = process.extractOne(query, title_choices)

    # –ü–æ–∏—Å–∫ –ø–æ —Å—Ç–æ–ª–±—Ü—É Subject (–†–∞–∑–¥–µ–ª)
    subject_choices = df["Subject"].dropna().unique()
    best_subject = process.extractOne(query, subject_choices)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–µ–¥–∏ Title –∏ Subject
    best_match = None
    match_info = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏

    if best_title and best_title[1] >= threshold:
        matches = df[df["Title"] == best_title[0]]
        if not matches.empty:
            best_match = matches.iloc[0]
            match_info = ("Title", best_title[1])  # –ù–∞–π–¥–µ–Ω–æ –ø–æ Title
    elif best_subject and best_subject[1] >= threshold:
        matches = df[df["Subject"] == best_subject[0]]
        if not matches.empty:
            best_match = matches.iloc[0]
            match_info = ("Subject", best_subject[1])  # –ù–∞–π–¥–µ–Ω–æ –ø–æ Subject

    # –ï—Å–ª–∏ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É—Å—Ç—ã
    if best_match is None or isinstance(best_match,
                                        pd.Series) and best_match.empty:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        top_title = best_title if best_title else (None, 0)
        top_subject = best_subject if best_subject else (None, 0)

        # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –±–ª–∏–∑–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞
        if top_title[1] > top_subject[1]:
            match_info = ("Title", top_title[1])
            matches = df[df["Title"] == top_title[0]]
            if not matches.empty:
                best_match = matches.iloc[0]
        elif top_subject[1] > top_title[1]:
            match_info = ("Subject", top_subject[1])
            matches = df[df["Subject"] == top_subject[0]]
            if not matches.empty:
                best_match = matches.iloc[0]

    return best_match, match_info


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search
async def search(update: Update, context: CallbackContext):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /search [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞]")
        return

    query = " ".join(context.args)
    result, match_info = fuzzy_search(query)

    if result is not None:
        if match_info and match_info[1] >= 70:  # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–Ω—ã–π
            response = f"üìö *{result['Title']}*\nüîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–Ω–∏–≥—É]({result['Link']})"
        else:  # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –Ω–µ —Å–æ–≤—Å–µ–º —Ç–æ—á–Ω–æ
            response = (
                f"‚ùó –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å —Ç–æ—á–Ω—ã–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º.\n"
                f"–ú—ã –Ω–∞—à–ª–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n"
                f"üìö *{result['Title']}*\nüîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–Ω–∏–≥—É]({result['Link']})\n"
                f"‚ö†Ô∏è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {match_info[1]}%"
            )
    else:
        response = "‚ùå –ö–Ω–∏–≥–∞ –∏–ª–∏ —Ä–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."

    await update.message.reply_text(response, parse_mode="Markdown")


async def get_subjects(update: Update, context: CallbackContext):
    subjects = df["Subject"].unique()
    await update.message.reply_text("\n".join(subjects))


def title_search(query):
    subjects = df["Subject"].unique()

    if query in subjects:
        return df[df["Subject"] == query]["Title"].tolist()
    else:
        return None


async def sections(update: Update, context: CallbackContext):
    subjects = df["Subject"].unique()
    buttons = [
        [InlineKeyboardButton(subject, callback_data=f"subject_{subject}")]
        for subject in subjects
    ]

    reply_markup = InlineKeyboardMarkup(buttons)
    await  update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏:", reply_markup=reply_markup)


async def section_selected(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    subject = query.data.split("_", 1)[1]
    books = title_search(subject)
    if books:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
        books_text = "\n---------------------\n".join(books)
        response = f"–í—Å–µ –∫–Ω–∏–≥–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ \"{subject}\":\n{books_text}\n\n"
    else:
        response = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–Ω–∏–≥–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–∏–≥–∞–º–∏
    await query.edit_message_text(response)


async def button_handler(update: Update, context):
    text = update.message.text

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—è –∫ –Ω—É–∂–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º
    if text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        await info(update, context)
    elif text == "–†–∞–∑–¥–µ–ª—ã":
        await get_subjects(update, context)
    elif text == "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –≤—Å–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞":
        await sections(update, context)
    else:
        # –û—Ç–≤–µ—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")


app = ApplicationBuilder().token(token).build()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('info', info))
app.add_handler(CommandHandler("search", search))
app.add_handler(CommandHandler("subjects", get_subjects))
# app.add_handler(CommandHandler("books", get_books))
app.add_handler(CallbackQueryHandler(section_selected, pattern="subject_"))

app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler))

app.run_polling()
